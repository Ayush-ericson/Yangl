bridge
45c45,46
<   revision 2022-05-06 {
---
>   
>   revision 2022-05-19 {
47c48
<       "Rebase Qrev with Qcw updates.";
---
>       "Published as part of IEEE Std 802.1Qcw.";
49c50,52
<       "IEEE Std 802.1Q-2022, Bridges and Bridged Networks.";
---
>       "IEEE Std 802.1Qcw - Bridges and Bridged Networks - Amendment: 
>       YANG Data Models for Scheduled Traffic, Frame Preemption, and 
>       Per-Stream Filtering and Policing.";
1199c1202,1203
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1201c1205
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1333c1337,1338
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1335c1340
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1361c1366,1367
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1363c1369
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1376c1382,1383
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1378c1385
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1391c1398,1399
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1393c1401
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1407c1415,1416
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1409c1418
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" { 
1423c1432,1433
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1425c1435
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" { 
1493c1503,1504
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1495c1506
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" { 
1509c1520,1521
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1511c1523
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1701c1713,1714
<           when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>           when
>             "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1703c1716
<             "/../../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>             "/../../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1721c1734,1735
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1723c1737
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
1761c1775,1776
<         when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
---
>         when
>           "/dot1q:bridges/dot1q:bridge[dot1q:name=current()"+
1763c1778
<           "/../dot1q:component-name]/dot1q:type != 'dot1q:d-bridge-component'" {  
---
>           "/../dot1q:component-name]/dot1q:type != 'd-bridge-component'" {
pb
36c36
<   revision 2022-05-06 {
---
>   revision 2022-05-19 {
38c38
<       "Update to rebase on Qcw";
---
>       "Published as part of IEEE Std 802.1Qcw.";
40c40,42
<       "IEEE Std 802.1Q-2022, Bridges and Bridged Networks.";
---
>       "IEEE Std 802.1Qcw - Bridges and Bridged Networks - Amendment: 
>       YANG Data Models for Scheduled Traffic, Frame Preemption, and 
>       Per-Stream Filtering and Policing.";
73c75,76
<       when "/dot1q:bridges/dot1q:bridge[dot1q:name=current()" +
---
>       when
>         "/dot1q:bridges/dot1q:bridge[dot1q:name=current()" +
128c131,132
<       when "/dot1q:bridges/dot1q:bridge[dot1q:name=current() " +
---
>       when
>         "/dot1q:bridges/dot1q:bridge[dot1q:name=current() " +
158c162,163
<       when "/dot1q:bridges/dot1q:bridge[dot1q:name=current() " +
---
>       when
>         "/dot1q:bridges/dot1q:bridge[dot1q:name=current() " +
dotq1-types
1a2
>   yang-version "1.1";
27a29,43
>   revision 2022-05-19 {
>     description
>       "Published as part of IEEE Std 802.1Qcw.";
>     reference
>       "IEEE Std 802.1Qcw - Bridges and Bridged Networks - Amendment: 
>       YANG Data Models for Scheduled Traffic, Frame Preemption, and 
>       Per-Stream Filtering and Policing.";
>   }
>   revision 2022-03-29 {
>     description
>     "Published as part of IEEE Std 802.1Qcz-2022.";
>     reference
>     "IEEE Std 802.1Qcz-2022, Bridges and Bridged Networks - Congestion
>     Isolation.";
>   }
36c52
<       "Published as part of IEEE Std 802.1Qcx-2020. Second version.";
---
>     "Published as part of IEEE Std 802.1Qcx-2020.";
43c59
<       "Published as part of IEEE Std 802.1Q-2018. Initial version.";
---
>     "Published as part of IEEE Std 802.1Q-2018.";
132,134c148,158
<       priority value between 0 and 7, these values can be used by
<       quality of service (QoS) to prioritize different classes of
<       traffic.";
---
>     priority value between 0 and 7, these values can be used by quality
>     of service (QoS) to prioritize different classes of traffic.";
>   }
>   typedef num-traffic-class-type {
>     type uint8 {
>       range "1..8";
>     }
>     description
>     "The number of traffic classes supported or participating in a
>     particular feature. There are between 1 and 8 supported traffic
>     classes defined by IEEE Std 802.1Q.";
163,164c187
<       semantics equivalent to the VlanId textual convention of the
<       SMIv2.";
---
>     semantics equivalent to the VlanId textual convention of the SMIv2.";
319,320c342,343
<       "A grouping which represents an 802.1Q VLAN that matches a range
<       of VLAN Ids.";
---
>     "A grouping which represents an 802.1Q VLAN that matches a range of
>     VLAN Ids.";
337,338c360,361
<       EtherType and a single VLAN Id, ordered list of ranges, or 'any'
<       to match on any VLAN Id.";
---
>     EtherType and a single VLAN Id, ordered list of ranges, or 'any' to
>     match on any VLAN Id.";
435,436c458,459
<       "The Priority Code Point decoding table enables the decoding of
<       the priority and drop-eligible parameters from the PCP.";
---
>     "The Priority Code Point decoding table enables the decoding of the
>     priority and drop-eligible parameters from the PCP.";
490,492c513,515
<         "This map associated the priority and drop-eligible parameters
<         to the priority used to encode the PCP of the VLAN based upon
<         the priority code point selection type.";
---
>       "This map associated the priority and drop-eligible parameters to
>       the priority used to encode the PCP of the VLAN based upon the
>       priority code point selection type.";
603,604c626,627
<       performed on, or inquire about, the current contents of the
<       Traffic Class Table (8.6.6) for a given Port.";
---
>     performed on, or inquire about, the current contents of the Traffic
>     Class Table (8.6.6) for a given Port.";
608a632
>       status deprecated;
610c634,640
<         "The priority index into the traffic class table.";
---
>       "The priority index into the traffic class table. This list
>       modeled the Traffic Class Table incorrectly. 
>       available-traffic-class should be a single value per port
>       and not a list of all possible available-traffic-class. 
>       For more information see maintenance issue 0230.
>       The status of this object is deprecated. It is replaced by 
>       sibling container traffic-class-table.";
642a673,753
> 
>       container traffic-class-table {
>         description
>         "The priority to traffic class mapping.";
>         reference
>         "8.6.6 of IEEE Std 802.1Q-2022";
>         leaf number-of-traffic-classes {
>           type uint8 {
>             range "1..8";
>           }
>           description
>           "The number of egress traffic classes supported on this
>           port. This object may be optionally read-only.";
>           reference
>           "12.6.3.1 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority0 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 0";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority1 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 1";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority2 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 2";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority3 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 3";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority4 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 4";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority5 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 5";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority6 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 6";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>         leaf priority7 {
>           type traffic-class-type;
>           must "current() < ../number-of-traffic-classes";
>           description
>           "The traffic class index associated with priority 7";
>           reference
>           "8.6.6 of IEEE Std 802.1Q-2022";
>         }
>       }
648,650c759,761
<       that can be performed on, or inquire about, the current contents
<       of the Transmission Selection Algorithm Table (12.20.2) for a
<       given Port.";
---
>     that can be performed on, or inquire about, the current contents of
>     the Transmission Selection Algorithm Table (12.20.2) for a given
>     Port.";
722,724c833,835
<               specifying that a frame with a destination MAC address,
<               and in the case of VLAN Bridge components, VID that meets
<               this specification.";
---
>             specifying that a frame with a destination MAC address, and
>             in the case of VLAN Bridge components, VID that meets this
>             specification.";
803,805c914,916
<               specifying that a frame with a destination MAC address,
<               and in the case of VLAN Bridge components, VID that meets
<               this specification.";
---
>             specifying that a frame with a destination MAC address, and
>             in the case of VLAN Bridge components, VID that meets this
>             specification.";
823,825c934,936
<               specifying that a frame with a destination MAC address,
<               and in the case of VLAN Bridge components, VID that meets
<               this specification.";
---
>             specifying that a frame with a destination MAC address, and
>             in the case of VLAN Bridge components, VID that meets this
>             specification.";
848,850c959,961
<               specifying that a frame with a destination MAC address,
<               and in the case of VLAN Bridge components, VID that meets
<               this specification.";
---
>             specifying that a frame with a destination MAC address, and
>             in the case of VLAN Bridge components, VID that meets this
>             specification.";
868,870c979,981
<               specifying that a frame with a destination MAC address,
<               and in the case of VLAN Bridge components, VID that meets
<               this specification.";
---
>             specifying that a frame with a destination MAC address, and
>             in the case of VLAN Bridge components, VID that meets this
>             specification.";
973,975c1084,1086
<         "The number of frames that were to be forwarded on the
<         associated MAC but could not be transmitted (e.g., frame would
<         be too large, 6.5.8).";
---
>       "The number of frames that were to be forwarded on the associated
>       MAC but could not be transmitted (e.g., frame would be too large,
>       6.5.8).";
979a1091,1121
>   identity type-of-operation {
>     description
>     "Represents the operation type (name).";
>   } 
>   grouping base-gate-control-entries {
>     list gate-control-entry {
>       key "index";
>       leaf index {
>         type uint32;
>       }
>       leaf operation-name {
>         type identityref {
>           base type-of-operation;
>         }
>         mandatory true;
>         description
>         "The name (type) of the operation for this entry.";
>       }
>       leaf time-interval-value {
>         type uint32;
>         description
>         "timeIntervalValue is a 32-bit unsigned integer,
>         representing a number of nanoseconds. After timeIntervalValue
>         nanoseconds have elapsed since the completion of the previous
>         entry in the gate control list, control passes to the next
>         entry.";
>         reference
>         "12.29.1.2.3, 8.6.8.4 of IEEE Std 802.1Q-2022";
>       }
>     }  
>   }
980a1123
> 
types
1a2
>   yang-version "1.1";
25a27,35
>   
>   revision 2022-05-19 {
>     description
>       "Published as part of IEEE Std 802.1Qcw.";
>     reference
>       "IEEE Std 802.1Qcw - Bridges and Bridged Networks - Amendment: 
>       YANG Data Models for Scheduled Traffic, Frame Preemption, and 
>       Per-Stream Filtering and Policing.";
>   }
285a296,331
>   }
>   grouping rational-grouping {
>     description
>     "Definition of a non-negative rational number.";
>     leaf numerator {
>       type uint32;
>       description
>       "Numerator of the rational number.";
>     }
>     leaf denominator {
>       type uint32 {
>         range "1..4294967295";
>       }
>       description
>       "Denominator of the rational number.";
>     }
>   }
>   grouping ptp-time-grouping {
>     description
>     "This grouping specifies a PTP timestamp, represented as a
>     48-bit unsigned integer number of seconds and a 32-bit unsigned
>     integer number of nanoseconds.";
>     reference
>     "6.3.3.4 of IEEE Std 802.1AS";
>     leaf seconds {
>       type uint64;
>       description
>       "This is the integer portion of the timestamp in units of
>       seconds. The upper 16 bits are always zero.";
>     }
>     leaf nanoseconds {
>       type uint32;
>       description
>       "This is the fractional portion of the timestamp in units of
>       nanoseconds. This value is always less than 10^9.";
>     }
